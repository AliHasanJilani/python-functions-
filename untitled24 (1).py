# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1spHUsPApma0TMLtzYe_sQxxINa936Dfd
"""

myset={1,3,4,5,2}
myset2={3,4,1,5,6}
myset.difference(myset2)
print(myset)

myset={1,3,4,5,2}
myset2={3,4,1,5,6}
myset.difference_update(myset2)
print(myset)

myset={1,3,4,5,2}
myset2={3,4,1,5,6}
myset.issuperset(myset2)

myset={1,3,4,5,2}
myset2={3,4,1,5,6}
myset.symmetric_difference(myset2)

# function
# block of code
# part
# codereuable

def greeting():
  print("hey user")

greeting()

def greeting(user1): # user1 => parameter / formal argument
  print("hey user",user1)

greeting("ali")  # argument
greeting("tushar sir")

x=10
def greeting():
  x=20
  print("hey user",x)


greeting()
print(x
      )

def func(num):
  print("function inside:",num)

x=20
func(x)

def func(num):
  print("function inside:",id(num))

x=600
print(id(x))
func(x)

def func(num):
  print("function inside:",id(num),num)
  num=601
  print("function inside new",id(num),num)


num=600
print(id(num))
func(num)

def func(num):
  print("function inside:",id(num),num)
  num=601
  print("function inside new",id(num),num)


num=600
print("Before func:",id(num))
func(num)
print("After func:",id(num))

def func(num):
  print("function inside:",id(num),num)
  num.append(30)
  print("function inside new",id(num),num)


num=[10,20]
print("Before func:",id(num))
func(num)
print("After func:",id(num))

def func(num1):
  num1.append(30)

num=[10,20]
func(num)
print("new num",num)

def func(x,y,z):
  print("x:",x, "y:",y, "z:",z)

func(10,20,30) # required argument

def func(x,y,z):
  print("x:",x, "y:",y, "z:",z)

func(20,30,10) # positional argument
func(30,10,29)

def func(x,y,z):
  print("x:",x, "y:",y, "z:",z)

func(y=20,z=30,x=10) # keyword argument

def func(x,y,z="abc"):
  print("x:",x, "y:",y, "z:",z)

func(10,y=20,z="xyz") # default argument

num=6
x=0
for i in range(2,num):
  if num%i==0:
    x=1
    break
if x==1:
  print("not prime")
else:
  print("prime")

def primecheck(num):
  x=0
  for i in range(2,num):
    if num%i==0:
      x=1
      break
  if x==1:
    print("not prime")
  else:
    print("prime")

primecheck(7)
primecheck(10)

def amstrong(num):
  sum=0
  temp=num
  while temp>0:
    digit=temp%10
    sum+=digit**3
    temp//=10
  if num==sum:
    print("amstrong number")
  else:
    print("not a amstrong number")

amstrong(103)

def func(x):
  print(x+10)

y=func(10)
print("y:",y)

def func(x):
  return x+10

y=func(10)
print("y:",y)

